#!/usr/bin/env python3

import subprocess
import re

# TODO: handle number at beginning of filename ?
extract_num = re.compile(r"\D+(?P<first_num>\d+)(?P<rest>.*$)")

class Window:
    def __init__(self, name, ID):
        self._name = name
        self._id = ID

    def __lt__(self, other):
        return is_lt(self._name, other._name)

    def swap(self, other):
        i3swap_cmd = ['i3-msg', f'[con_id={self._id}] swap with con_id {other._id}']
        subprocess.run(i3swap_cmd)
# End class Window

def is_lt(s1, s2):
    # TODO: handle unequal number of numerical values in windows name
    res1 = extract_num.search(s1)
    res2 = extract_num.search(s2)
    if res1 is None or res2 is None:
        raise ValueError("Missing number")
    n1 = int(res1.group('first_num'))
    n2 = int(res2.group('first_num'))
    if n1 == n2:
        return is_lt(res1.group('rest'), res2.group('rest'))
    else:
        return n1 < n2

# https://en.wikipedia.org/wiki/Selection_sort
# `One thing which distinguishes selection sort from other sorting algorithms is that it makes the minimum possible number of swaps`
def selection_sort(a):
    length = len(a)
    for i in range(length):
        # Find Minimum
        jMin = i
        for j in range(i+1, length):
            if a[j] < a[jMin]:
                jMin = j

        # Perform swap
        if jMin != i:
            a[i].swap(a[jMin])
            a[i], a[jMin] = a[jMin], a[i]

def focused_x_id():
    xdotool_cmd = ['xdotool', 'getactivewindow']
    x_id = subprocess.run(xdotool_cmd, capture_output=True, text=True)
    return x_id.stdout.strip()

def parent_i3_id(focused_x_id):
    i3get_tree_cmd = ['i3-msg', '-t', 'get_tree']
    jq_parent_cmd = ['jq', f'recurse(.nodes[]) | select(.nodes[].window == {focused_x_id}) | .id']
    try:
        i3_ps = subprocess.Popen(i3get_tree_cmd, stdout=subprocess.PIPE, text=True)
        output = subprocess.check_output(jq_parent_cmd, stdin=i3_ps.stdout, text=True)
        i3_ps.wait()
    except subprocess.CalledProcessError as err:
        print(err)
    return output.strip()

def siblings_i3_id(parent_id):
    i3get_tree_cmd = ['i3-msg', '-t', 'get_tree']
    # This request also return the parent's id but it's easier to remove it afterward than to tweak the jq request
    jq_siblings_cmd = ['jq', f'recurse(.nodes[]) | select(.id == {parent_id}) | recurse(.nodes[]) | .id, .name']
    try:
        i3_ps = subprocess.Popen(i3get_tree_cmd, stdout=subprocess.PIPE, text=True)
        output = subprocess.check_output(jq_siblings_cmd, stdin=i3_ps.stdout, text=True)
        i3_ps.wait()
    except subprocess.CalledProcessError as err:
        print(err)
    lines = output.splitlines()
    win_vec = []
    for i in range(0, len(lines), 2):
        if lines[i] == parent_id:
            continue
        win_vec.append(Window(lines[i+1], lines[i]))
    return win_vec


vec = siblings_i3_id(parent_i3_id(focused_x_id()))

selection_sort(vec)
